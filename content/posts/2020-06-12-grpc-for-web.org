#+TITLE: gRPC를 웹브라우저에 호출해보자(a.k.a Typescript)
#+SUBTITLE: Server streaming RPC를 웹브라우저에 호출해보자
#+AUTHOR: yeongcheon
#+DATE: 2020-06-12 22:00:00 +0900
#+TAGS[]: gRPC envoy typescript golang server-stream
#+MATH: false
#+DRAFT: true

* 목표
  브라우저에서 rpc를 호출하고 싶습니다. 하지만 2020년 7월 기준으로 브라우저에서 gRPC의 rpc를 직접 호출하는 건 불가능합니다. 그치만 [[https://www.envoyproxy.io/][envoy Proxy]]와 함께라면 가능합니다. *이 문서에서는 grpc-web을 이용해 생성된 Typescript 파일을 이용해 [[https://grpc.io/docs/what-is-grpc/core-concepts/#server-streaming-rpc][server streaming rpc]]를 호출하는 방법을 설명합니다.* 서버는 [[https://go.dev/][Go]], 클라이언트는 [[https://www.typescriptlang.org/][Typescript]] 언어를 사용합니다.

* proto 파일 작성
  특정 채팅방에 접속해서 server stream을 얻는 rpc를 작성해봅시다. 양방향 스트림이 아니라 서버사이드 스트림으로 한 이유는 현재 grpc-web에서는 양방향 스트림을 지원하지 않기 때문입니다(클라이언트 스트림도 지원하지 않습니다). 만약 채팅방에 메세지를 전송하고 싶다면 해당 기능을 가진 rpc를 별도로 작성하여야 합니다.
  #+BEGIN_SRC protobuf
service ChatService {
    rpc Entry(EntryRequest) returns (stream ChatMessageResponse);
    // rpc Broadcast(BroadcastRequest) returns (stream BroadcastResponse);
}

message EntryRequest {
    string room_id = 1;
}

message ChatMessageResponse {
    string content = 1;
}

  #+END_SRC
* [[https://github.com/grpc/grpc-go][grpc-go]] 설치
* [[https://github.com/grpc/grpc-web][grpc-web]] 설치
* envoy 설치
** envoy Dockerfile 설정
** envoy.yaml 작성
* server 작성
* client 작성
* 테스트
