#+TITLE: gRPC를 웹브라우저에 호출해보자(a.k.a Typescript)
#+SUBTITLE: Server streaming RPC를 웹브라우저에 호출해보자
#+AUTHOR: yeongcheon
#+DATE: 2020-06-12 22:00:00 +0900
#+TAGS[]: gRPC envoy typescript golang server-stream
#+MATH: false
#+DRAFT: true

* 목표
  브라우저에서 rpc를 호출하고 싶습니다. 하지만 2020년 7월 기준으로 브라우저에서 gRPC의 rpc를 직접 호출하는 건 불가능합니다. 그치만 [[https://www.envoyproxy.io/][envoy Proxy]]와 함께라면 가능합니다. *이 문서에서는 grpc-web을 이용해 생성된 Typescript 파일을 이용해 [[https://grpc.io/docs/what-is-grpc/core-concepts/#server-streaming-rpc][server streaming rpc]]를 호출하는 방법을 설명합니다.* 서버는 [[https://go.dev/][Go]], 클라이언트는 [[https://www.typescriptlang.org/][Typescript]] 언어를 사용합니다.

* proto 파일 작성
  특정 채팅방에 접속해서 server stream을 얻는 rpc를 작성해봅시다. 양방향 스트림이 아니라 서버사이드 스트림으로 한 이유는 현재 grpc-web에서는 양방향 스트림을 지원하지 않기 때문입니다(클라이언트 스트림도 지원하지 않습니다). 만약 채팅방에 메세지를 전송하고 싶다면 해당 기능을 가진 rpc를 별도로 작성하여야 합니다.
  #+BEGIN_SRC protobuf
service ChatService {
    rpc Entry(EntryRequest) returns (stream ChatMessageResponse);
    // rpc Broadcast(BroadcastRequest) returns (stream BroadcastResponse);
}

message EntryRequest {
    string room_id = 1;
}

message ChatMessageResponse {
    string content = 1;
}

  #+END_SRC
* [[https://github.com/grpc/grpc-go][grpc-go]] 설치
  서버 코드를 생성하기 위해서 [[https://github.com/grpc/grpc-go][grpc-go]]를 설치합니다. 자세한 내용은 [[https://github.com/grpc/grpc-go/blob/master/README.md#installation][여기]]를 참고합니다.

* [[https://github.com/grpc/grpc-web][grpc-web]] 설치
  클라이언트 코드를 생성하기 위해서 [[https://github.com/grpc/grpc-web][grpc-web]]을 설치합니다. 자세한 내용은 [[https://www.npmjs.com/package/grpc-web][여기]]를 참고합니다.

* envoy 설치
  위에서 말했다시피 브라우저에서 RPC를 직접 호출할 순 없습니다. envoy Proxy를 통해서 간접적으로 호출해야 합니다. 이 예제에서는 envoy를 도커를 이용해서 실행하는 방법을 설명합니다.
** envoy.yaml 작성
   #+BEGIN_SRC yaml
admin:
  access_log_path: /tmp/admin_access.log
  address:
    socket_address: { address: 0.0.0.0, port_value: 9901 }

static_resources:
  listeners:
  - name: listener_0
    address:
      socket_address: { address: 0.0.0.0, port_value: 8080 }
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager
          codec_type: auto
          stat_prefix: ingress_http
          stream_idle_timeout: 0s
          route_config:
            name: local_route
            virtual_hosts:
            - name: local_service
              domains: ["*"]
              routes:
              - match: { prefix: "/" }
                route:
                  cluster: chat_service
                  max_grpc_timeout: 0s
                  timeout:
                    seconds: 0
              cors:
                allow_origin_string_match:
                - prefix: "*"
                allow_methods: GET, PUT, DELETE, POST, OPTIONS
                allow_headers: keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,custom-header-1,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout,authorization
                max_age: "1728000"
                expose_headers: custom-header-1,grpc-status,grpc-message
          http_filters:
          - name: envoy.filters.http.grpc_web
          - name: envoy.filters.http.cors
          - name: envoy.filters.http.router
  clusters:
  - name: chat_service
    connect_timeout: 0.25s
    type: logical_dns
    http2_protocol_options: {}
    lb_policy: round_robin
    load_assignment:
      cluster_name: cluster_0
      endpoints:
        - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: 127.0.0.1
                    port_value: 9090
   #+END_SRC
** envoy Dockerfile 설정
   위에서 작성한 설정파일을 사용한 DockerFile을 작성합니다.
   #+BEGIN_SRC Dockerfile
FROM envoyproxy/envoy-dev:latest
COPY ./envoy.yaml /etc/envoy/envoy.yaml
CMD /usr/local/bin/envoy -c /etc/envoy/envoy.yaml
   #+END_SRC
* server 작성
* client 작성
* 테스트
