---
title: "Rust Smart Pointer List"
subtitle: "러스트에서 주로 사용되는 스마트 포인터의 종류에 대해 알아보자"
date: "2022-08-07T17:00:00+09:00"
lastmod: 2022-08-07T17:00:00+09:00
draft: true
author: "YeongCheon Kim"
tags: ["rust", "smart pointer", "rust in action"]
---

[[https://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&ejkGb=KOR&linkClass=331501&barcode=9788966263615][Rust in Action]]에 서술된 스마트 포인터 목록.

* Smart Pointer List
** 원시 포인터
*** 소개
\starmut T와 \starconst T 일가는 포인터 세계에서 자요로운 과격파다. 번개처럼 빠르지만 매우 불안전하다.
*** 능력
    1. 빠르다.
    2. 외부 함수 인터페이스를 통해 외부와 소통할 수 있다.
*** 약점
    1. 불안전하다.
** Box<T>
*** 소개
무엇이든 상자에 담는다. 장기 보관 목적으로 어떡 타입이든 받아들인다. 새롭고 안전한 프로그래밍 시대의 역군
*** 능력
    1. 값을 Heap에 저장한다.
*** 약점
    1. 크기가 커진다.
** Rc<T>
*** 소개
참조 카운트 포인터 =RC<T>= 는 러스트의 능숙하지만 인색한 회계사다. 누가 무엇을 언제 빌펴 갔는지 알고 있다.
*** 능력
    1. 데이터에 공유 접근 가능.
*** 약점
    1. 크기가 커진다.
    2. 런타임 비용 발생
    3. 스레드 안전하지 않다.
** Arc<T>
*** 소개
=Arc<T>= 는 러스트의 대표(ambassador)다. 스레드 간에 값을 공유하며 서로 방해하지 않음을 보장한다.
*** 능력
    1. 값에 대한 공유 접근
    2. 스레드 안전성
*** 약점
    1. 크기가 커진다.
    2. 런타임 비용 발생
** Cell<T>
*** 소개
변신의 전문가. Cell<T>는 변경할 수 없는 값을 변경할 수 있는 능력을 부여한다.
*** 능력
    1. 내부 가변성
*** 약점
    1. 크기가 커진다.
    2. 성능
** RefCell<T>
*** 소개
Ref<CellT>로 불편 참조에 변경을 행할 수 있다. 마음을 사로잡는 그 힘에는 일정 비용이 따른다.
*** 능력
    1. 내부 가변성
    2. Rc와 Arc 안에 중첩될 수 있으며 불변 참조만 허용한다.
*** 약점
    1. 크기가 커진다.
    2. 런타임 비용 발생
    3. 컴파일 시 보장 누락
** Cow<T>
*** 소개
읽기만 필요한 경우라면 굳이 대상을 다시 쓸 필요는 없다. 수정이 있을 경우에만 다시 쓸 것이다. 쓰기 시 복사의 역할이 이것이다.
*** 능력
    1. 단지 읽기 전용으로 쓰일 때는 쓰기 동작을 하지 않는다.
*** 약점
    1. 크기가 커질 수도 있다.
** String
*** 소개
String은 사용자 입력의 불확실성을 어떻게 다루어야 하는지에 대한 지침으로서 안전한 추상화를 어떻게 만드는지 보여 준다.
*** 능력
    1. 원하는 만큼 동적으로 커진다.
    2. 실행 시 정확한 인코딩을 보장한다.
*** 약점
    1. 할당된 크기를 넘을 수 있다.
** Vec<T>
*** 소개
프로그램의 주 저장 체계. Vec<T>는 값이 생성되거나 파괴될 때 데이터를 순서대로 보관한다.
*** 능력
    1. 원하는만큼 동적으로 커진다.
*** 약점
    1. 할당된 크기를 넘을 수 있다.
** RawVec<T>
*** 소개
Vec<T>와 여타 동적 크기를 가진 타입의 기반, 필요할 때 데이터를 어떻게 수용할지 알고 있다.
*** 능력
    1. 원하는 만큼 동적으로 커진다.
    2. 공간을 찾기 위해 메모리 할당자와 함께 작동한다.
*** 약점
    1. 코드에서 직접 사용할 수 있다.
** Unique<T>
*** 소개
값의 유일한 소유자. 유일한 포인터는 완전한 제어권을 가짐을 보장한다.
*** 소개
    값의 유일한 소유자. 유일한 포인터는 완전한 제어권을 가짐을 보장한다.
*** 능력
    1. STring과 같은 타입의 기반이며, 값을 독점적으로 소유해야 한다.
*** 약점
    1. 애플리케이션 코드에 직접 쓰는 것은 적절하지 않다.
** Shared<T>
*** 소개
    소유권 공유는 어렵다. Shared<T>를 쓰면 조금 더 쉬워진다.
*** 능력
    1. 공유된 소유권
    2. 비어 있더라도 T의 크기만큼 메모리를 정렬할 수 있다.
*** 약점
    1. 애플리케이션 코드에 직접 쓰는 것은 적절하지 않다.
